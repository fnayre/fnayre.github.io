{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-11-19-algebraic-effects-series-2/","result":{"data":{"site":{"siteMetadata":{"title":"Abstract fun"}},"markdownRemark":{"id":"4d2c509c-b3e7-55d7-9fbc-fb6d18d9556f","excerpt":"This is the second part of a series about Algebraic Effects and Handlers. Part 1 : continuations and control transfer Part 2 : Capturing continuations with…","html":"<p>This is the second part of a series about Algebraic Effects and Handlers.</p>\n<ul>\n<li>Part 1 : <a href=\"/2018-11-19-algebraic-effects-series-1\">continuations and control transfer</a></li>\n<li><strong>Part 2 : Capturing continuations with Generators</strong></li>\n<li>Part 3 : <a href=\"/2018-11-19-algebraic-effects-series-3\">Delimited continuations</a></li>\n<li>Part 4 : <a href=\"/2018-11-19-algebraic-effects-series-4\">Algebraic Effects and handlers</a></li>\n</ul>\n<p>In the <a href=\"/2018-11-19-algebraic-effects-series-1\">first post</a> we introduced\nthe notions of continuation and control transfer. We saw how programs written in Continuation\nPassing Style (CPS) are more flexible in terms of control transfer manipulation.\nWhile, in direct style, control transfer is implicitly managed by the compiler via the call stack, in CPS continuations\nare reified as first class arguments to CPS functions.</p>\n<p>However, a major drawback of CPS programs is that they are harder to read and write by humans, so they are more suitable\nto be manipulated by other programs like compilers or interpreters. This is why programming languages that expose\ncontinuations often provide a direct style syntax/API to manipulate them.</p>\n<p>In this part, we’ll do the same in JavaScript. Although the language doesn’t provide a way to access continuations\nwe can always [try to] emulate them using Generator functions.</p>\n<blockquote>\n<p>This post assumes the reader is familiar with Generator functions.</p>\n</blockquote>\n<h3>Driving Generators in direct style</h3>\n<p>Say we have this simple function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">return</span> message\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stranger\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => \"Hi Stranger\"</span></code></pre></div>\n<p>Running this function is as simple as <code class=\"language-text\">const result = greet(someString)</code>. Now if we take the Generator version</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">return</span> message\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stranger\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => greet { &lt;suspended>, __proto__: Generator, ... }</span></code></pre></div>\n<p>We get only the Generator object. In order to get the result we need to step the Generator until it’s done. Below is the\ncode for a function that drives the Generator and returns its result</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen<span class=\"token punctuation\">,</span> arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stranger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => \"Hi Stranger\"</span></code></pre></div>\n<p>Works greet, but just like normal functions can call other normal functions, we’d like also for our Generators to call other Generators.\nFor example, this is the Generator version of the factorial function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">const</span> n1 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> n1\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => NaN</span></code></pre></div>\n<p>Fortunately, Generators allow us to intercept yielded values. This gives us the ability to interpret those values as desired then resume\nthe Generator with the result of the interpretation.</p>\n<p>In our case, interpreting child generators amounts to recursively running them and getting their result.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> x<span class=\"token punctuation\">.</span>next <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen<span class=\"token punctuation\">,</span> arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// interpret calls to child Generators</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => 3628800</span></code></pre></div>\n<p>So far, we can call a Generator like a normal function, which includes nested and recursive calls. It seems like we’ve been able to\nemulate the call stack. Note here we’re just reusing the underlying JavaScript call stack.</p>\n<p>However, as we saw in the previous post, direct style can’t deal with the async problem. CPS allows us to perform asynchronous calls\nbut that comes with a price. Our next step is to allow those calls while still preserving the direct style.</p>\n<h3>Driving Generators in CPS</h3>\n<p>Let’s say we want to implement a <code class=\"language-text\">sleep</code> function that, when yielded in a Generator, will pause its execution for some time</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">slowDouble</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In its current form, <code class=\"language-text\">runGenerator</code> is unable to implement the <code class=\"language-text\">sleep</code> behavior because it runs recursively/synchronously until completion.</p>\n<p>In order to allow async calls, we need to rewrite the function in CPS: remember in this style we don’t return function results, instead we pass them to the\nprovided continuation(s)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But we’re not there yet. So far we can only yield child generators or plain values. We need a way to represent async calls and we need\nto interpret the given representation.</p>\n<p>A simple solution is to represent async calls themselves as CPS functions. Let’s say we write a CPS <code class=\"language-text\">sleep</code> version</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">millis<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> millis<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we curry it</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">millis</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> millis<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The curried version is more suitable to use with <code class=\"language-text\">runGenerator</code>. We can simply plug in a continuation that will\nresume the Generator with the async result. More generally, we’ll represent async calls with functions taking\na single callback. We’ll call those functions <em>suspended computations</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">continuation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// here we handle suspended computations</span>\n    <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">continuation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">slowDouble</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// tic tac toc</span>\n<span class=\"token comment\">// 20</span></code></pre></div>\n<p>For readers already familiar with async implementation on top of Generators, this seems just like the old plumbing trick. But observe\nthat the callback we provided to the suspended computation represents the continuation of <strong>the whole program</strong>, so now we have the full\ncontrol over what to do next. Put another way, we gain the flexibility of CPS while still writing direct style code.</p>\n<p>As a simple illustration, here is an example that simulates debugger’s <code class=\"language-text\">break</code>. Instead of invoking the continuation,\nwe save it in a variable and then pause the whole program.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> resume\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">BREAK</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**PAUSED**\"</span><span class=\"token punctuation\">)</span>\n  resume <span class=\"token operator\">=</span> next\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">breakTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end of main\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">breakTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> <span class=\"token constant\">BREAK</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// typing this in the console</span>\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n  message 1\n  message 2\n  **** PROGRAM PAUSED ****\n*/</span>\n<span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n  message 3\n  message 4\n  **** PROGRAM PAUSED ****\n*/</span>\n<span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// end of main</span></code></pre></div>\n<p>Another example would be an <code class=\"language-text\">exit(result)</code> function that, when yielded from inside a deeply nested Generator, would\nskip all the parents and abort the whole computation with the given result. For example consider the following code</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">main result: (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">parent result: (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"child result\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => main result: (parent result: (child result))</span></code></pre></div>\n<p>Using <code class=\"language-text\">exit</code> we could abort directly from inside <code class=\"language-text\">child</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token string\">\"This shouldn't happen\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// should be => child result</span></code></pre></div>\n<blockquote>\n<p>If you recall the interpreter example in the previous post, at some point we did the same thing by providing the top-level\ncontinuation as a second argument to all child CPS functions. We can do the same trick here with <code class=\"language-text\">runGenerator</code>. It would be\na good exercise.</p>\n</blockquote>\n<h3>The road to undelemited continuations</h3>\n<p>Ok, I assume, with good faith, that you did the last exercise. Here is ~the~ my solution</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> done<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">continuation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>abort<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">continuation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// helper function to thread in the top-level continuation</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => child result</span></code></pre></div>\n<p>It works, but it’s not very satisfactory. We said that the promise of CPS is to empower us,\nend users of the API, so we can implement various control operators. But in the above solution, the control is hard\ncoded inside the interpreter (<code class=\"language-text\">runGenerator</code>). We don’t want to modify the interpreter each time we want to add\nsome control construct and more importantly we don’t want to implement our solutions in low level CPS code. What w’re really\naiming for is to provide some more general API in order to implement <code class=\"language-text\">exit</code> or other control flow in user land.</p>\n<p>Let’s go step by step. First, observe that what <code class=\"language-text\">start</code> does, essentially, is <em>capturing</em> the top-level continuation.\nBut we know we can capture a continuation by yielding a suspended computation in the Generator. So, our first step would\nbe capturing the top-level continuation.</p>\n<p>For that, We’ll make <code class=\"language-text\">start</code> itself a Generator and capture its continuation.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">abort</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">genFunc</span><span class=\"token punctuation\">(</span>abort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’re using <code class=\"language-text\">runGenerator</code> manually, which is a little awkaward, but this leaves our interpreter unmodified. Later we’ll see how\nto abstract away this code.</p>\n<p>Next, we observe that the captured continuation is just passed as an additional argument to the nested <code class=\"language-text\">runGenerator</code> calls in order to\nkeep it visible in the current scope. We can do the same by exploiting the lexical scope of Generators and passing the captured continuation\nas an argument to child Generators.</p>\n<p>Our first tentative of refactoring yields the below code</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">abort</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">genFunc</span><span class=\"token punctuation\">(</span>abort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">abort</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>abort<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">main result: (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">abort</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">child</span><span class=\"token punctuation\">(</span>abort<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">parent result: (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">abort</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child result\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token string\">\"This shouldn't happen\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => child result</span></code></pre></div>\n<p>By the way, notice how, in <code class=\"language-text\">child</code>, the <code class=\"language-text\">next</code> continuation is ignored in the body of the suspended computation, which\ninstead invokes <code class=\"language-text\">abort</code>. It means the next statement <code class=\"language-text\">throw &quot;This shouldn&#39;t happen&quot;</code> won’t be executed and the control will\njump back directly into the <code class=\"language-text\">start</code> Generator.</p>\n<p>But we’re not there yet, how can we implement the generic <code class=\"language-text\">exit(result)</code> function?</p>\n<p>Well, given the current code, we can’t. Our <code class=\"language-text\">exit</code> has no way to get the <code class=\"language-text\">abort</code> continuation without this being visible in scope.\nSurely this is awkward, we don’t want to end up writing <code class=\"language-text\">yield next =&gt; abort(result)</code> each time we want to exit.</p>\n<p>There is less awkward alternative, though. Instead of forwarding the captured continuation itself, then\ncreating the suspended computation (<code class=\"language-text\">exit</code>) inside the exiting function, we can create <code class=\"language-text\">exit</code> itself inside the\ncode that captures the top-level continuation (here in the <code class=\"language-text\">start</code> Generator), then pass it to child Generators.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">abort</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">genFunc</span><span class=\"token punctuation\">(</span>exit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> abort<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>exit<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">main result: (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">child</span><span class=\"token punctuation\">(</span>exit<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">parent result: (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child result\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token string\">\"This shouldn't happen\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => child result</span></code></pre></div>\n<p>All we need, in order to complete the refactoring, is to abstract away the code that captures the top-level continuation inside a reusable\nfunction. But first we need to pick a suitable name for it. <code class=\"language-text\">call_with_current_continuation</code> looks expressive but quite verbose, so let’s\nabbreviate it to <a href=\"https://en.wikipedia.org/wiki/Call-with-current-continuation\"><code class=\"language-text\">callcc</code></a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callcc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">capturedCont</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this is our previous exit</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">jumpToCallccPos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token function\">capturedCont</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">genFunc</span><span class=\"token punctuation\">(</span>jumpToCallccPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> capturedCont<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">callcc</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// rest of the code unmodified</span>\n\n<span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => child result</span></code></pre></div>\n<p>Note that, unlike what’s found in languages like <code class=\"language-text\">Scheme</code>, our implementation allows only one invocation of the <code class=\"language-text\">callcc</code> continuation.\nWe’re here constrained by how Generators work in JavaScript. Each call to <code class=\"language-text\">generator.next()</code> is a one way ticket, so invoking\nthe continuation multiple times will just keep advancing the Generator. Continuations that can be\nresumed only once are said to be <em>one shot</em>. Continuations that can be resumed many times are said to be <em>multi shot</em>.</p>\n<blockquote>\n<p>In this series, we’ll content ourselves with one shot continuations. If you’re interested in how we could emulate multi shoot\ncontinuations <a href=\"https://gist.github.com/yelouafi/858095244b62c36ec7ebb84d5f3e5b02\">Here is an example</a>. Note this has a non\nnegligible space/time cost.</p>\n</blockquote>\n<p>The rest of the post illustrates the use of <code class=\"language-text\">callcc</code> with a couple of common examples.</p>\n<h3>Example 1: Emulating try/cacth</h3>\n<p>The previous <code class=\"language-text\">exit</code> example implemented a simplified version of exceptions. Next, we’ll try to make a more elaborated example of structured\nexception handling</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> handlerStack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">trycc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">computation<span class=\"token punctuation\">,</span> handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">callcc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    handlerStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>handler<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> computation\n    handlerStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">throwcc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>handler<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> handlerStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">k</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">trycc/throwcc</code> emulates the <code class=\"language-text\">try/catch/throw</code> statements. <code class=\"language-text\">trycc</code> starts by capturing the current continuation, saves it in a stack along\nwith the handler, then run the computation, which may (or may not) throw. If the computation returns successfully then no exception was\nthrown and we can remove the handler from the stack. In the case the computation has invoked <code class=\"language-text\">throwcc</code> then we also pop the handler stack\nalong with the captured continuation, run the handler then use the captured continuation to jump back to where <code class=\"language-text\">trycc</code> was called.</p>\n<h3>Example 2: cooperative scheduling</h3>\n<p>Another popular example is the implementation of cooperative scheduling using what we call <em>coroutines</em>. They are somewhat similar to Generators.\nOnce started, a coroutine executes some code then may yield to a central scheduler. The scheduler will save the state of the coroutine then\npick another coroutine to run. Below is an example</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token function\">proc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token function\">proc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end main\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">proc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> pause\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Assuming we have implemented <code class=\"language-text\">fork</code> and <code class=\"language-text\">pause</code>, the result of running <code class=\"language-text\">main()</code> gives the following outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">  1 0\n  2 0\n  1 1\n  2 1\n  1 2\n  2 2\n  1 3\n  1 4\n  end main</code></pre></div>\n<p>A possible implementation of coroutines is given below</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> processQueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    processQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> gen\n        <span class=\"token keyword\">yield</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> pause <span class=\"token operator\">=</span> <span class=\"token function\">callcc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  processQueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">k</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>processQueue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> processQueue<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> next\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here’s how the above code works</p>\n<ul>\n<li><code class=\"language-text\">fork</code> doesn’t start the provided coroutine immediately, it just adds it to a global queue of processes</li>\n<li><code class=\"language-text\">pause</code> saves the state of the current coroutine by capturing its continuation, adding it to the process queue then\npicking the next coroutine to resume</li>\n<li><code class=\"language-text\">dequeue</code> is called both when a coroutine pauses and when it returns</li>\n</ul>\n<h3>Conclusion</h3>\n<p>Voilà! we reached the end of the second part. Just a couple more of posts to complete the understanding Algebraic Effects and Handlers.</p>\n<p>Main takeaways of this part:</p>\n<ul>\n<li>When driven using dierct style, Generators can emulate the call stack, but can’t support async calls</li>\n<li>When driven using CPS, Generators can perfom async work while still allowing the user to program in direct style</li>\n<li>More important, we can capture the current contiuation of the program anytime we need it (<code class=\"language-text\">callcc</code>)</li>\n<li>When the <code class=\"language-text\">callcc</code> continuation is invoked it aborts the current execution context and resumes from when <code class=\"language-text\">callcc</code> was invoked</li>\n</ul>\n<p>Although <code class=\"language-text\">callcc</code> is quite powerful, it has a major limitation. The captured continuation represents the rest of the whole program. It means\nthe <code class=\"language-text\">yield k(someValue)</code> can’t return values since all we can do is resume until the program completes. This kind of continuations is known as\n<em>undelimited continuations</em>.</p>\n<p>Next part, we’ll see an even more powerful kind: <em>delimited continuations</em>, which allow us to capture only a slice of the rest of the program.\nA delimited continuation can return a value and thus it can be composed inside other functions.</p>\n<p>See you next post. Thanks for being a patien reader!</p>","frontmatter":{"title":"Algebraic Effects in JavaScript part 2 - Capturing continuations with Generators","date":"November 19, 2018","description":null}},"previous":{"fields":{"slug":"/2018-11-19-algebraic-effects-series-1/"},"frontmatter":{"title":"Algebraic Effects in JavaScript part 1 - continuations and control transfer"}},"next":{"fields":{"slug":"/2018-11-19-algebraic-effects-series-3/"},"frontmatter":{"title":"Algebraic Effects in JavaScript part 3 - Delimited Continuations"}}},"pageContext":{"id":"4d2c509c-b3e7-55d7-9fbc-fb6d18d9556f","previousPostId":"835d8854-1030-507d-bca1-4cd53c015954","nextPostId":"36b54556-76bd-5a42-b5ac-a2094123f8bb"}},"staticQueryHashes":["2841359383","3257411868"]}