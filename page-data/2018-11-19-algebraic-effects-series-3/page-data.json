{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-11-19-algebraic-effects-series-3/","result":{"data":{"site":{"siteMetadata":{"title":"Abstract fun"}},"markdownRemark":{"id":"2262fe50-b1e2-5e04-91ed-1e4181eb8636","excerpt":"This is the third part of a series about Algebraic Effects and Handlers. Part 1 : continuations and control transfer Part 2 : Capturing continuations with…","html":"<p>This is the third part of a series about Algebraic Effects and Handlers.</p>\n<ul>\n<li>Part 1 : <a href=\"/2018-11-19-algebraic-effects-series-1\">continuations and control transfer</a></li>\n<li>Part 2 : <a href=\"/2018-11-19-algebraic-effects-series-2\">Capturing continuations with Generators</a></li>\n<li><strong>Part 3 : Delimited continuations</strong></li>\n<li>Part 4 : <a href=\"/2018-11-19-algebraic-effects-series-4\">Algebraic Effects and handlers</a></li>\n</ul>\n<p>In the preceding parts, we introduced the notions of continuations and control transfer. We saw how to capture the current\ncontinuation inside a Generator, and illustrated how to implement (the one shot version) of the famous <code class=\"language-text\">callcc</code>.</p>\n<p>In this part, we’re going to see how to capture delimited continuations with Generators. While <code class=\"language-text\">callcc</code> allowed us to capture the rest of the whole program, we can also choose to capture only a slice of it. One of the direct consequences of this concept is that delimited continuations can now return a value, and thus they can be composed inside the flow of another function. This is an important trait that will be exploited in the next part.</p>\n<h3>Back to the Call Stack</h3>\n<p>In direct style, we saw that control transfer between functions works through the Call Stack.</p>\n<ul>\n<li>Each function call pushes a new frame (called also an activation record) onto the stack</li>\n<li>Each function return pops the corresponding frame from the stack</li>\n</ul>\n<p>Let’s consider the following example, which computes the product of an array of numbers</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>ys<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xs<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> y <span class=\"token operator\">*</span> <span class=\"token function\">product</span><span class=\"token punctuation\">(</span>ys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To visualize the call stack at a given moment, we can set a breakpoint in the browser devtools then run the above example in the console. The program will pause and we can examine the Call Stack panel of the browser</p>\n<p><img src=\"https://user-images.githubusercontent.com/5453835/45965848-7be72600-c021-11e8-80e9-ffb332d1fa28.png\" alt=\"call-stack-1\"></p>\n<p>Here, the program is paused on the third line of <code class=\"language-text\">product()</code>. The Call Stack contains already four frames:</p>\n<ul>\n<li><code class=\"language-text\">anonymous</code> can be seen as the root frame of the browser console session</li>\n<li><code class=\"language-text\">main</code> corresponds to the <code class=\"language-text\">main()</code> call executed in the console</li>\n<li>The first <code class=\"language-text\">product</code> frame represents <code class=\"language-text\">product([2, 4, 6])</code> executed in <code class=\"language-text\">main</code></li>\n<li>The second <code class=\"language-text\">product</code> frame represents the recursive call inside the <code class=\"language-text\">return y * product(ys)</code> statement (ie <code class=\"language-text\">return 2 * product([4,6])</code>)</li>\n</ul>\n<p>In other words, the Call Stack tells us what part of the work has already been done. It tells us, also, what part of the work remains to do:</p>\n<ul>\n<li>The rest of the work to do inside the current frame (<code class=\"language-text\">product([4,6])</code>), namely calling <code class=\"language-text\">product([6])</code>, multiplying the result by <code class=\"language-text\">y (= 4)</code> then returning the result (<code class=\"language-text\">24</code>) to the parent frame</li>\n<li>\n<p>Plus the rest of the work to do in the parent frames:</p>\n<ul>\n<li>the call frame of <code class=\"language-text\">product([2,4,6])</code> will multiply the previous result by <code class=\"language-text\">2</code> then returns <code class=\"language-text\">48</code> to the <code class=\"language-text\">main</code> frame</li>\n<li>The call frame of <code class=\"language-text\">main()</code> will simply return the result <code class=\"language-text\">48</code> to its parent frame</li>\n<li>The call frame of <code class=\"language-text\">anonymous</code> will display the result into the console</li>\n</ul>\n</li>\n</ul>\n<p>In other words, the continuation is mainly represented with the state of the Call Stack at the considered moment of\nexecution. Therefore, if we could implement something similar to the Call Stack on top of Generators we’ll be able, in principle,\nto capture current continuations.</p>\n<p>Contrast this with the CPS representation of the continuation as an ordinary function. This stateless representation may be seen as superior (to the Call Stack’s statefull representation) since it brings us closer to purity. However, the Call Stack representation has some advantages as well:</p>\n<ul>\n<li>It’s easier to implement more advanced stack manipulations, like delimited continuations, using the\nstatefull representation (possible because JavaScript is single threaded)</li>\n<li>It’s easier to add DX features on top of the statefull approach. For example, a babel plugin can\ninstrument the code to add some useful information (function name, line, column) to the stack frames, and some program API\ncan dump this information in developer mode.</li>\n</ul>\n<h3>Modeling the Call Stack with Generators</h3>\n<p>Below is a new implementation using the statefull approach</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> x<span class=\"token punctuation\">.</span>next <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen<span class=\"token punctuation\">,</span> arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> done <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> _return <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span>_return<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isGenerator</span><span class=\"token punctuation\">(</span>_return<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>_return<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> _return <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">_return</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">.</span>_return <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen<span class=\"token punctuation\">,</span> onDone</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  gen<span class=\"token punctuation\">.</span>_return <span class=\"token operator\">=</span> onDone<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Instead of passing a continuation argument, we now rely on the presence of a <code class=\"language-text\">_return</code> field in the Generator, which\nrepresents the parent frame (it may be safer to use a Symbol here). When the Generator is done, it passes the return value to its caller. When we call a child Generator, we set its <code class=\"language-text\">_return</code> to the current Generator.</p>\n<p>Note also that we’re now passing the Generator itself to the yielded function. So to implement something like <code class=\"language-text\">sleep(millis)</code>\nwe have to write</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">gen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the statefull implementation, we’re effectively building a linked list of Generators (with a callback inserted at the\nroot by <code class=\"language-text\">start</code>).</p>\n<p>The implementation of <code class=\"language-text\">callcc</code> can be also automatically adapted</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">callcc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">capturedGen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// this is our escape function</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">jumpToCallccPos</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// instead if resuming the current generator</span>\n      <span class=\"token comment\">// we directly resume the one captured by callcc</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">next</span> <span class=\"token operator\">=></span> <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>capturedGen<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">genFunc</span><span class=\"token punctuation\">(</span>jumpToCallccPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gen<span class=\"token punctuation\">.</span>_return <span class=\"token operator\">=</span> capturedGen<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ok, now that we have reified the Call stack as a concrete data structure, we’re ready to tackle delimited continuations.</p>\n<h3>Delimited Continuations</h3>\n<p>We’ll introduce how delimited continuations work step by step through a series of examples.</p>\n<p>We said that delimited continuations capture only a slice of the Call Stack. Our first step will be, then, some way\nto mark a stack frame as the limit of the continuation to be captured. This is the purpose of <code class=\"language-text\">reset</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentGen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">genFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gen<span class=\"token punctuation\">.</span>_return <span class=\"token operator\">=</span> parentGen<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// setting the limit of the continuation</span>\n    gen<span class=\"token punctuation\">.</span>_reset <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">reset</code> takes a Generator function and returns a suspended computation (here a function taking the parent Generator).\nLike <code class=\"language-text\">runGenerator</code>, the suspended computation will run the provided Generator function after setting its <code class=\"language-text\">_return</code>\nfield to the caller Generator. It also adds a special <code class=\"language-text\">_reset</code> field, which acts as a marker on the Call Stack. This\nfield will serve us to limit the extent of the captured continuation as we’ll see later.</p>\n<p>The first thing to note is that, when invoked on an ‘ordinary’ Generator, <code class=\"language-text\">reset</code> amounts to a simple Generator call</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => Hi</span></code></pre></div>\n<p>So alone, <code class=\"language-text\">reset</code> is pretty useless. The interesting stuff happens when we introduce our next function <code class=\"language-text\">shift</code> inside a <code class=\"language-text\">reset</code> block.</p>\n<p>We’ll first introduce a simplified version of <code class=\"language-text\">shift</code> that doesn’t capture the current continuation</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentGen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// finds the closest reset</span>\n    <span class=\"token keyword\">let</span> resetGen <span class=\"token operator\">=</span> parentGen<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>resetGen<span class=\"token punctuation\">.</span>_reset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      resetGen <span class=\"token operator\">=</span> resetGen<span class=\"token punctuation\">.</span>_return<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">genFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// gen will directly return to the parent of reset</span>\n    gen<span class=\"token punctuation\">.</span>_return <span class=\"token operator\">=</span> resetGen<span class=\"token punctuation\">.</span>_return<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here’s an example of how it works</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">resetFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hi \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">shiftFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"from inside shift\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => from inside shift</span></code></pre></div>\n<p>In a normal sequence of calls, we’d expect the result to be <code class=\"language-text\">&#39;Hi from inside shift&#39;</code>. However, <code class=\"language-text\">shift</code> isn’t an ordinary\nfunction. In the above code, the Generator provided to <code class=\"language-text\">shift</code> will return, directly, to the parent of the closest\n<code class=\"language-text\">reset</code> block. In this case, it effectively behaves as our previous <code class=\"language-text\">exit</code> function. More concretely, w’ve transformed\nthe following Call Stack</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main() -&gt; reset(resetFn) -&gt; child() -&gt; shift(shiftFn)</code></pre></div>\n<p>into this one</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main -&gt; shiftFn()</code></pre></div>\n<p>Put another way, we’ve discarded all the stack frames between shift and (including) reset.</p>\n<p>What happens to the discarded frames? Well, here’s the more interesting stuff, those would constitute\nthe delimited continuation that should be provided to <code class=\"language-text\">shift</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parentGen</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// finds the closest reset</span>\n    <span class=\"token keyword\">let</span> resetGen <span class=\"token operator\">=</span> parentGen<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>resetGen<span class=\"token punctuation\">.</span>_reset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      resetGen <span class=\"token operator\">=</span> resetGen<span class=\"token punctuation\">.</span>_return<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">delimitedCont</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// captures the continuation from after shift up to reset</span>\n      <span class=\"token keyword\">return</span> <span class=\"token parameter\">nextGen</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        resetGen<span class=\"token punctuation\">.</span>_return <span class=\"token operator\">=</span> nextGen<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// resume from the shift's parent frame</span>\n        <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>parentGen<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">genFunc</span><span class=\"token punctuation\">(</span>delimitedCont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    gen<span class=\"token punctuation\">.</span>_return <span class=\"token operator\">=</span> resetGen<span class=\"token punctuation\">.</span>_return<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">runGenerator</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It may seem confusing how this works, so let’s go step by step on a simple example</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">resetFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">shiftFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">k</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> c <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The sequence of calls until <code class=\"language-text\">shift</code> corresponds to</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main() -&gt; #resetFn() -&gt; shift(shiftFn)</code></pre></div>\n<p>Where <code class=\"language-text\">#</code> is used to mark the reset position. We saw that the first effect of <code class=\"language-text\">shift</code> is to discard the frames up to the enclosing <code class=\"language-text\">reset</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main() -&gt; shift(shiftFn) -&gt; ...</code></pre></div>\n<p>Then the discarded frames (here <code class=\"language-text\">#resetFn()</code>) are provided as a continuation to <code class=\"language-text\">shiftFn</code>. So after the\n<code class=\"language-text\">yield k(2)</code> we obtain the following sequence</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main() -&gt; shiftFn(k) -&gt; #resetFn()</code></pre></div>\n<p>What does <code class=\"language-text\">#resetFn()</code> corresponds to? it’s the rest of work to do after the <code class=\"language-text\">shift</code> position: namely setting <code class=\"language-text\">b</code> with some provided value then multiplying by <code class=\"language-text\">a (= 10)</code>. ie it’s like a function: <code class=\"language-text\">(v =&gt; a * v) -&gt; (2 * 10) -&gt; 20</code></p>\n<p>After <code class=\"language-text\">#resetFn()</code> returns, <code class=\"language-text\">shift</code> continues by adding the obtained result <code class=\"language-text\">20</code> to <code class=\"language-text\">3</code>. The final result is then <code class=\"language-text\">23</code>.</p>\n<p>Naturally, you have all the right to ask the legitimate question: why do we have to program in such a confusing style?</p>\n<p>We have the choice between two answers:</p>\n<p>I can repeat the arguments from the previous parts about how this can give control-flow super-powers. Which is\npartly true, but maybe not too concrete.</p>\n<p>Or, you can read the next (and final) part: this time we’ll be really talking about Algebraic Effects and Handlers.</p>","frontmatter":{"title":"Algebraic Effects in JavaScript part 3 - Delimited Continuations","date":"November 19, 2018","description":null}},"previous":{"fields":{"slug":"/2018-11-19-algebraic-effects-series-2/"},"frontmatter":{"title":"Algebraic Effects in JavaScript part 2 - Capturing continuations with Generators"}},"next":{"fields":{"slug":"/2018-11-19-algebraic-effects-series-4/"},"frontmatter":{"title":"Algebraic Effects in JavaScript part 4 - Implementing Algebraic Effects and Handlers"}}},"pageContext":{"id":"2262fe50-b1e2-5e04-91ed-1e4181eb8636","previousPostId":"8746452d-d92c-5e5f-8467-b56de15c9c25","nextPostId":"fee964ee-e4ec-5692-8a7f-cdbf34ce6e1b"}},"staticQueryHashes":["2841359383","3257411868"]}