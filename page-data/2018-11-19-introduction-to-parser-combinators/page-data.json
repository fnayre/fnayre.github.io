{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-11-19-introduction-to-parser-combinators/","result":{"data":{"site":{"siteMetadata":{"title":"Abstract fun"}},"markdownRemark":{"id":"42dae126-e787-539f-94cb-6e7c11278516","excerpt":"In this tutorial we’re going to build a set of parser combinators. What is a parser combinator? We’ll answer the above question in 2 steps what is a parser? and…","html":"<p>In this tutorial we’re going to build a set of parser combinators.</p>\n<h2>What is a parser combinator?</h2>\n<p>We’ll answer the above question in 2 steps</p>\n<ol>\n<li>what is a parser?</li>\n<li>and.. what is a parser combinator?</li>\n</ol>\n<p>So first question: What is parser?</p>\n<p>Answer: (in its simplest form) a parser is a</p>\n<ol>\n<li>a function</li>\n<li>that takes some input in form of a raw sequence (like a string of characters)</li>\n<li>and returns some meaningful data built from the raw input</li>\n<li><strong>or</strong> some error if the raw input does not conform to what is expected</li>\n</ol>\n<p>Here is a very simple example. A parser that takes a string. If the string represents a valid integer it returns that integer, otherwise it returns a parse error.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">parseInteger</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">+</span>match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid integer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parseInteger(&quot;12&quot;)\n  &gt;&gt; 12\n\n$ parseInteger(&quot;hey&quot;)\n  &gt;&gt; Error: Invalid integer</code></pre></div>\n<p>Nice, but what about</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parseInteger(&quot;12hey&quot;)\n  &gt;&gt; Error: Invalid integer</code></pre></div>\n<p>Because we used <code class=\"language-text\">^</code> &#x26; <code class=\"language-text\">$</code> our regular expression checks if the entire input is a valid integer. It makes sense if this is the only thing we want to parse. However, very often we want to parse more complicated things.</p>\n<h2>Sequencing parsers</h2>\n<p>Here is another example, we want to parse the following sequence</p>\n<ol>\n<li>an integer</li>\n<li>a ’+’ character</li>\n<li>then another integer</li>\n</ol>\n<p>And return the sum of the 2 numbers obtained in (1) and (3)</p>\n<p>We’ll keep it simple and not allow spaces between the 3 steps. So how do we approach it?</p>\n<p>We have already our <code class=\"language-text\">parseInteger</code> function. We could reuse it somehow with another function <code class=\"language-text\">parsePlus</code>. But we need to rethink our previous definition.</p>\n<p>Let’s think about it: to parse the above sequence, we need to run 3 parsers (ie functions) one after another. But it’s not as simple as composing simple functions. Passing from one step to another requires some glue code.</p>\n<ol>\n<li>first <code class=\"language-text\">parseInteger</code> will try to parse an integer from the begining of the input</li>\n<li>if (1) returns an error then we stop parsing and returns that error</li>\n<li>otherwise, we call the second parser with the rest of the string</li>\n</ol>\n<p>But to achieve (3) we must get the rest of the string from the first parser. So now our parser function should return</p>\n<ol>\n<li>either an error if the parser has failed</li>\n<li>or the result plus the rest of the input in case of success</li>\n</ol>\n<p>So that with the return value in (2) we can call the next parser in the sequence to parse the rest of the input.</p>\n<p>Before rewriting <code class=\"language-text\">parseInteger</code> let’s first make some changes to our parser interface.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// We'll use our own error description</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expected<span class=\"token punctuation\">,</span> actual</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> isFailure<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">,</span> actual <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> rest</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// And for our main parsing, we'll invoke this function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parser<span class=\"token punctuation\">,</span> input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Parse error.\n\t\texpected </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>expected<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.\n\t\tinstead found '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span>actual<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'\n\t</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let’s modify the parseInteger function to fit the new interface (from now on we’ll use a more concise naming convention: eg <code class=\"language-text\">ìnteger</code> insetad of <code class=\"language-text\">parseInteger</code>. It will make our code more readable as we’ll be defining more complex parsers)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// note we removed $ from the end of the regular expression</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> matchedText <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>matchedText<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>matchedText<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"an integer\"</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(integer, &quot;12&quot;)\n  &gt;&gt; {data: 12, rest: &quot;&quot;}\n\n$ parse(integer, &quot;hey&quot;)\n  Uncaught Error: Parse error.\n\t\texpected an integer.\n\t\tinstead found &#39;hey&#39;\n\n$ parse(integer, &quot;12hey&quot;)\n  &gt;&gt; {data: 12, rest: &quot;hey&quot;}</code></pre></div>\n<p>Fine. Let’s write our second parser which parses the ’+’ character. This one is much simpler</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"'+'\"</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and 2 quick tests</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(plus, &#39;+33&#39;)\n  &gt;&gt; {data: &quot;+&quot;, rest: &quot;33&quot;}\n\n$ parse(plus, &#39;33+&#39;)\n  &gt;&gt; Uncaught Error: Parse error.\n\t\texpected &#39;+&#39;.\n\t\tinstead found &#39;33+&#39;</code></pre></div>\n<p>Now we’ll write our main parser which will parse the entire sequence</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">plusExpr</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// step 1 : parse the first integer</span>\n  <span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">integer</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result1<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> int1<span class=\"token punctuation\">,</span> rest<span class=\"token operator\">:</span> input1 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> result1<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// step 2 : parse \"+\"</span>\n  <span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>input1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> rest<span class=\"token operator\">:</span> input2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> result2<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// step 3 : parse the second integer</span>\n  <span class=\"token keyword\">const</span> result3 <span class=\"token operator\">=</span> <span class=\"token function\">integer</span><span class=\"token punctuation\">(</span>input2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result3<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> int2<span class=\"token punctuation\">,</span> rest<span class=\"token operator\">:</span> input3 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> result3<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// one last check</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input3<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end of input\"</span><span class=\"token punctuation\">,</span> input3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// everything is allright. returns the final result</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>int1 <span class=\"token operator\">+</span> int2<span class=\"token punctuation\">,</span> input3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(plusExpr, &quot;12+34&quot;)\n  &gt;&gt; {data: 46, rest: &quot;&quot;}\n\n$ parse(plusExpr, &quot;12a+34&quot;)\n  &gt;&gt; Uncaught Error: Parse error.\n\t\texpected &#39;+&#39;.\n\t\tinstead found &#39;a+34&#39;\n\nparse(plusExpr, &quot;12-34&quot;)\n&gt;&gt; Uncaught Error: Parse error.\n\t\texpected &#39;+&#39;.\n\t\tinstead found &#39;-34&#39;\n\n$ parse(plusExpr, &quot;12+34rest&quot;)\n  &gt;&gt; Uncaught Error: Parse error.\n\t\texpected end of input.\n\t\tinstead found &#39;12+34rest&#39;</code></pre></div>\n<p>So far so good. But for our parser to be practical we need to make some improvements</p>\n<ol>\n<li>we would like to have some resuable way parse more things and not just numbers.</li>\n<li>we need also some reusable way to create sequences like in <code class=\"language-text\">plusExpr</code>. Right now sequencing parsers involves some boilerplate:</li>\n<li>at each step we must check if the result is an error to decide whether we should continue or stop</li>\n<li>we need also to take care of passing the rest of the input to the next parser</li>\n</ol>\n<p>This may not seem too much. But remember that in practice we’ll be creating this kind of sequences a lot of time. So abstracting this someway is going to make our life easier.</p>\n<p>So first (1). We’re going to make a couple of helper functions which create parsers.</p>\n<p>The first one will just generate a parser that parses a given a string of characters</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">match</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">textParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>match<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// example</span>\n<span class=\"token keyword\">const</span> plus <span class=\"token operator\">=</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>plus<span class=\"token punctuation\">,</span> <span class=\"token string\">\"+12\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>data<span class=\"token operator\">:</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> rest<span class=\"token operator\">:</span> <span class=\"token string\">\"12\"</span><span class=\"token punctuation\">}</span>\n\n$ <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>plus<span class=\"token punctuation\">,</span> <span class=\"token string\">\"12+\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">>></span> Uncaught Error<span class=\"token operator\">:</span> Parse error<span class=\"token punctuation\">.</span>\n\t\texpected <span class=\"token string\">'+'</span><span class=\"token punctuation\">.</span>\n\t\tinstead found <span class=\"token string\">'12+'</span></code></pre></div>\n<p>Our second helper works like the first one but matches regular expressions instead of plain text</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">regex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">regex</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> anchoredRegex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">^</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>regex<span class=\"token punctuation\">.</span>source<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">regexParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> anchoredRegex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>match <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> matchedText <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>matchedText<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>matchedText<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> decimal <span class=\"token operator\">=</span> <span class=\"token function\">regex</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+(?:\\.\\d+)?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">parse(decimal, &quot;12.34&quot;)\n  &gt;&gt; {data: &quot;12.34&quot;, rest: &quot;&quot;}</code></pre></div>\n<p>Hmm… not quite. Our aim is for an actual number 2.3 and not just its textual representation.</p>\n<p>We can not blame our regex helper. A regular expression can be used to parse arbitrary data types, it have no idea what kind of data we are expecting. So we need some general way of transforming the textual representation into some meaningful data.</p>\n<p>To make it even more ‘general’ we’ll define another helper function which transforms the result of any parser not just regex ones. meet the <code class=\"language-text\">map</code> function</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> parser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mapParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> decimal <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token operator\">+</span>x<span class=\"token punctuation\">,</span> <span class=\"token function\">regex</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+(?:\\.\\d+)?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(decimal, &quot;12.34&quot;)\n  &gt;&gt; {data: 12.34, rest: &quot;&quot;}\n\n$ parse(decimal, &quot;a12.34&quot;)\n  &gt;&gt; Uncaught Error: Parse error.\n\t\texpected /\\d+(?:\\.\\d+)?/.\n\t\tinstead found &#39;a12.34&#39;</code></pre></div>\n<p>Certainely not the most helpful error message. We’ll see later how to improve that.</p>\n<p>Now that we defined our <em>primitive</em> parsers. Let’s define our sequencing combinator.</p>\n<p>We already know that our sequencer needs to take care of <strong>error handling</strong> and <strong>state passing</strong> (ie passing the rest of the input) between steps. The last question is: what should be the return value?</p>\n<p>There may be multiple answers</p>\n<ol>\n<li>we could return just the result of the last step</li>\n<li>we could also return an array with the results from all steps</li>\n<li>we could apply some given function to the results from all steps and returns the result</li>\n</ol>\n<p>If we think about it, we can define (1) and (2) in terms of (3) (another possibility is to take (2) and use it with <code class=\"language-text\">map</code> but we’ll stick with (3)).</p>\n<p>Ok. So our combinator will take 2 parameters :</p>\n<ol>\n<li>a function that will be applied to the collected results from all parsers</li>\n<li>an array of parsers to be sequenced</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> parsers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">applyParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> accData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> currentInput <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> parser <span class=\"token keyword\">of</span> parsers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>currentInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n      accData<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      currentInput <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>rest<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>accData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> currentInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our <code class=\"language-text\">plusExpr</code> parser can now be defined in terms of apply</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> plusExpr <span class=\"token operator\">=</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  decimal<span class=\"token punctuation\">,</span>\n  plus<span class=\"token punctuation\">,</span>\n  decimal\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(plusExpr, &quot;12+34&quot;)\n  &gt;&gt; {data: 46, rest: &quot;&quot;}\n\n$ parse(plusExpr, &quot;12+34rest&quot;)\n  &gt;&gt; {data: 46, rest: &quot;rest&quot;}</code></pre></div>\n<p>Oops! we forgot to take care of the end of input.</p>\n<p>Never mind. We’ll just create a parser for that</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end of input\"</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// fix plusExpr</span>\n<span class=\"token keyword\">const</span> plusExpr <span class=\"token operator\">=</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  decimal<span class=\"token punctuation\">,</span>\n  plus<span class=\"token punctuation\">,</span>\n  decimal<span class=\"token punctuation\">,</span>\n  eof\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(plusExpr, &quot;12+34rest&quot;)\n  &gt;&gt; Uncaught Error: Parse error.\n\t\texpected end of input.\n\t\tinstead found &#39;rest&#39;</code></pre></div>\n<p>Using <code class=\"language-text\">apply</code> we can define helpers for the other possible results of sequencing</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Yeah not the best name I guess</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sequence</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>parsers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> results<span class=\"token punctuation\">[</span>results<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> parsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>parsers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> results<span class=\"token punctuation\">,</span> parsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(\n    sequence(text(&quot;hello&quot;), text(&quot;, &quot;), text(&quot;world&quot;)),\n    &quot;hello, world&quot;\n  )\n  &gt;&gt; {data: &quot;world&quot;, rest: &quot;&quot;}\n\n$ parse(\n    collect(text(&quot;hello&quot;), text(&quot;, &quot;), text(&quot;world&quot;)),\n    &quot;hello, world&quot;\n  )\n  &gt;&gt; {data: [&quot;hello&quot;, &quot;, &quot;, &quot;world&quot;], rest: &quot;&quot;}</code></pre></div>\n<h2>Merging parsers</h2>\n<p>We are going improve our expression parser by allowing more arithmetic operations.</p>\n<p>We need to modify <code class=\"language-text\">plusExpr</code> so that in its 2nd step it can handle other <em>alternatives</em> than ’+‘.</p>\n<p>Ah and as usual we need our solution to be general so that we can allow alternatives between arbitrary parsers and not just from simple strings (so you guessed it, a simple regex wont do it).</p>\n<p>You should be used to it now. We need another parser combinator.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">oneOf</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>parsers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">oneOfParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> parser <span class=\"token keyword\">of</span> parsers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// We'll see later a way to improve error reporting</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oneOf\"</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’re equiped now to make a better experssion parser (and evaluator).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> opMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"+\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"-\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> left <span class=\"token operator\">-</span> right<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> left <span class=\"token operator\">*</span> right<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"/\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> left <span class=\"token operator\">/</span> right\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getOp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">op</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> opMap<span class=\"token punctuation\">[</span>op<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> op <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getOp<span class=\"token punctuation\">,</span> <span class=\"token function\">oneOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> decimal <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token operator\">+</span>x<span class=\"token punctuation\">,</span> <span class=\"token function\">regex</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+(?:\\.\\d+)?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> expr <span class=\"token operator\">=</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> opFunc<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">opFunc</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  decimal<span class=\"token punctuation\">,</span>\n  op<span class=\"token punctuation\">,</span>\n  decimal\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(expr, &quot;12-34&quot;)\n  &gt;&gt; {data: -22, rest: &quot;&quot;}\n\n$ parse(expr, &quot;12*34&quot;)\n  &gt;&gt; {data: 408, rest: &quot;&quot;}</code></pre></div>\n<p>Works great. But error reporting could be better</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(expr, &quot;a12*34&quot;)\n\n&gt;&gt; Uncaught Error: Parse error.\n\t\texpected /\\d+(?:\\.\\d+)?/.\n\t\tinstead found &#39;a12*34&#39;\n\nparse(expr, &quot;12 + 34&quot;)\n  &gt;&gt; Uncaught Error: Parse error.\n\t\texpected oneOf.\n\t\tinstead found &#39; + 34&#39;</code></pre></div>\n<p>And we are not still supporting white spaces.</p>\n<p>Proper error reporting for real world parsers includes much more than just printing freindly names for regular expressions or the <code class=\"language-text\">oneOf</code> pasrers. We need to report the precise location (file, line &#x26; column) of the error as well as all the alternatives expected at this location (including from deeply nested parsers).</p>\n<p>We <del>will</del> may cover error reporting in more detail in another post. For now our solution will be a simple <code class=\"language-text\">label</code> helper which decorates a given parser with a user freindly message. The implementation has some pitfalls (more precisely we need to fix lookahead) but will suffice for our current needs</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parser<span class=\"token punctuation\">,</span> expected</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">labelParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">parser</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// replace the parser error with our custom one</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>actual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> decimal <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token operator\">+</span>x<span class=\"token punctuation\">,</span> <span class=\"token function\">label</span><span class=\"token punctuation\">(</span><span class=\"token function\">regex</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\d+(?:\\.\\d+)?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a decimal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> expr <span class=\"token operator\">=</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span> opFunc<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">opFunc</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  decimal<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">label</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> <span class=\"token string\">\"an arithmetic operator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  decimal\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(expr, &quot;12 + 34&quot;)\n  &gt;&gt; Uncaught Error: Parse error.\n\t\texpected an arithmetic operator.\n\t\tinstead found &#39; + 34&#39;\n\n$ parse(expr, &quot;a12 + 34&quot;)\n  &gt;&gt; Uncaught Error: Parse error.\n\t\texpected a decimal.\n\t\tinstead found &#39;a12 + 34&#39;</code></pre></div>\n<p>Our final touch will be to make the parser a little more realisic by skipping white spaces.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// lexeme is a function which takes a parser for 'junk' (eg whitespaces, comments)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">lexeme</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">junk</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// and returns another function which takes a parser for some meaningful data</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createTokenParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the (second) function returns a parser that</span>\n    <span class=\"token comment\">// parses the menaninful data then skips the junk</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> _</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>parser<span class=\"token punctuation\">,</span> junk<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> spaces <span class=\"token operator\">=</span> <span class=\"token function\">regex</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s*</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token function\">lexeme</span><span class=\"token punctuation\">(</span>spaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// redefine our experssion to skip leading and trailing spaces</span>\n<span class=\"token keyword\">const</span> expr <span class=\"token operator\">=</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">,</span> opFunc<span class=\"token punctuation\">,</span> num2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">opFunc</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  spaces<span class=\"token punctuation\">,</span> <span class=\"token comment\">// skips leading spaces</span>\n  <span class=\"token function\">token</span><span class=\"token punctuation\">(</span>decimal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">token</span><span class=\"token punctuation\">(</span><span class=\"token function\">label</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> <span class=\"token string\">\"an arithmetic operator\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">token</span><span class=\"token punctuation\">(</span>decimal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// skips trailing spaces</span>\n  eof\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(expr, &quot; 12 + 34 &quot;)\n  &gt;&gt; {data: 46, rest: &quot;&quot;}</code></pre></div>\n<h2>Yielding parsers</h2>\n<p>Some of you may know that as the original author of <a href=\"https://github.com/redux-saga/redux-saga\">redux-saga</a>\nI have a soft spot for generators (which some FP folks see as a restricted do notation but whatever).</p>\n<p>Imagine we could use genertaors to write sequences like <code class=\"language-text\">expr</code>. Instead of <code class=\"language-text\">apply</code> we could write something like</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> expr <span class=\"token operator\">=</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> spaces<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> decimal<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> opFunc <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> op<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> num2 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> decimal<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> eof<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">opFunc</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The yield statements embed all the machinery of error handling and state passing. We can write our sequences as if we were calling normal functions.</p>\n<p>It doesnt take much more to implement <code class=\"language-text\">go</code> than <code class=\"language-text\">apply</code>. The only difference is that instead of stepping over an array of parsers we step over a generator object. The generator yields successive parsers and at the end returns a value which will be returned as the final result of the main parser.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">genFunc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">yieldParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> gen <span class=\"token operator\">=</span> <span class=\"token function\">genFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> currentInput <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> genResult <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// if not done yet, genResult.value is the next parser</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>genResult<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> genResult<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>currentInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n      currentInput <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>rest<span class=\"token punctuation\">;</span>\n      genResult <span class=\"token operator\">=</span> gen<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// if done, genResult.value is the return value of the parser</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>genResult<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> currentInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The generator definition of <code class=\"language-text\">expr</code> looks more imperative than the <code class=\"language-text\">apply</code> based one (aka Applicative definition). Some people will prefer the first style, other will prefer the second. ‘Generator definitions’ (aka Monadic definitions) also allows some things that are not possible with Applicative ones. For example, imagine parsing an html like syntax where each opening tag must have a corresponding closing tag</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> openBracket <span class=\"token operator\">=</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> closeBracket <span class=\"token operator\">=</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// parses opening tag</span>\n  <span class=\"token keyword\">yield</span> openBracket<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> tagName <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> identifier<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> closeBracket<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> whateverContent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tagName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the last step, the yielded parser is created dynamically. There is no way to know what will be the closing tag before parsing the opening tag. With <code class=\"language-text\">apply</code> all parsers must be statically passed (known in advance) so we cant have the above kind of definitions.</p>\n<p>Generators can also allow some nice recusive definitions. For example, suppose we want to parse some token as many times as possible</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(many(regex(/\\d/)), &quot;123xyz&quot;)\n  should return &gt;&gt; {data: [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;], rest: &quot;xyz&quot;}</code></pre></div>\n<p>We can define <code class=\"language-text\">many</code> using generators like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// creates a parser that always succeeds with `value` without consuming any input</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">pure</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pureParser</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parser</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> <span class=\"token function\">oneOf</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> head <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> parser<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 1. keep calling self recursively</span>\n      <span class=\"token keyword\">const</span> tail <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> self<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>head<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>tail<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 2. until it fails in which case we return an empty array</span>\n    <span class=\"token function\">pure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using <code class=\"language-text\">many</code> we can for example parse expressions of an arbitrary length</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> expr <span class=\"token operator\">=</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">yield</span> spaces<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> num1 <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> decimal<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rest <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>op<span class=\"token punctuation\">,</span> decimal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">yield</span> eof<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>opFunc<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">opFunc</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ parse(expr, &#39;1 + 2 + 3 + 4&#39;)\n  &gt;&gt; {data: 10, rest: &quot;&quot;}</code></pre></div>\n<h3>There is much more</h3>\n<p>A single post can not cover parser combinators in detail. For those who want to go further, I made a library <a href=\"https://github.com/yelouafi/pcomb\">pcomb</a> that packages a more comprhensive set of combinators. It’not something ready for production but there are already enough features to play with more advanced parsers. Included also some examples of parsers which illustrates how combinators work.</p>\n<p>Here are things that still need to be covered (may do that in later posts)</p>\n<ul>\n<li>Lookahead: For example Our <code class=\"language-text\">oneOf</code> definition allows for an arbitrary lookahead. It means that even if an alternative consumes an arbitrary amount of input before failing, <code class=\"language-text\">oneOf</code> will always restart the next alternative from the begining of the current input.</li>\n</ul>\n<p>This is not efficient in practice and doesnt allow for proper error reporting. In practice we may better restrict the lookahead so that <code class=\"language-text\">oneOf</code> will not try another alternative if the current one has failed while consuming some input. This will also allow for better error reporting since we can propagate exactly what’s expected at a specific location.</p>\n<ul>\n<li>(Proper) Error reporting, this includes reporting the exact location of the failure as well as the expected items at that location while still allowing developpers to plug in their own error messages.</li>\n<li>User state: Parsing complex languages involves state bookeeping (eg “are we inside a function body?”). This involves allowing a parser to read/write state information. The most simple and composable solution is to write state readers/writers themeseves as parsers that can be inserted in a sequence.</li>\n<li>Refactoring using modular interfaces: abstarcts away error handling &#x26; state passing into sparate interfaces (as done in Haskell with stacks of Monad Transformers). This provides a more flexible interface allowing developpers to plug in their own implementations.</li>\n</ul>\n<p>I hope you enjoyed this post and that you’ll have some fun creating your own parsers.</p>","frontmatter":{"title":"Gentle introduction to Parser Combinators","date":"November 19, 2018","description":null}},"previous":null,"next":{"fields":{"slug":"/2018-11-19-algebraic-effects-series-1/"},"frontmatter":{"title":"Algebraic Effects in JavaScript part 1 - continuations and control transfer"}}},"pageContext":{"id":"42dae126-e787-539f-94cb-6e7c11278516","previousPostId":null,"nextPostId":"835d8854-1030-507d-bca1-4cd53c015954"}},"staticQueryHashes":["2841359383","3257411868"]}