{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-11-29-typing-optics-4/","result":{"data":{"site":{"siteMetadata":{"title":"Abstract fun"}},"markdownRemark":{"id":"504c34f5-67a2-5191-822d-ff90d35e8a84","excerpt":"This is the 4th post documenting my tentative to add typings to my focused lens library. So far, I have type definitions for base typeclasses/interfaces…","html":"<p>This is the 4th post documenting my tentative to add typings to my <a href=\"https://github.com/yelouafi/focused\">focused lens library</a>.</p>\n<p>So far, I have type definitions for</p>\n<ul>\n<li>base typeclasses/interfaces (Functor and Applicative)</li>\n<li>Isos</li>\n<li>Lenses</li>\n<li>Prisms</li>\n<li>Traversals</li>\n<li>Lens &#x26; Traversal Composition</li>\n<li><code class=\"language-text\">over</code> (and by extension <code class=\"language-text\">set</code>)</li>\n</ul>\n<p>Next I’ll be adding typing for accessor functions <code class=\"language-text\">view</code>, <code class=\"language-text\">preview</code>, … this requires typing Getters.</p>\n<h3>Gettings/Getters</h3>\n<p>For context, <code class=\"language-text\">focused</code> defines four accessor functions.</p>\n<ul>\n<li><code class=\"language-text\">view(optic, state)</code> is used to access a single focused value. (for now) The value must exist or it’ll throw an Error.</li>\n<li><code class=\"language-text\">preview(optic, state)</code> same as <code class=\"language-text\">view</code> but returns <code class=\"language-text\">null</code> if there is no value. If there are many focused values returns the first one.</li>\n<li><code class=\"language-text\">toList(optic, state)</code> returns all focused values (0 or more).</li>\n<li><code class=\"language-text\">has(optic, state)</code> returns false if there is no value under the focus, or true otherwise.</li>\n</ul>\n<p>In Haskell, all the above functions take a <code class=\"language-text\">Getting</code> as first parameter. The (simplified) definition is</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Getting</span> <span class=\"token hvariable\">r</span> <span class=\"token hvariable\">s</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Const</span> <span class=\"token hvariable\">r</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">s</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Const</span> <span class=\"token hvariable\">r</span> <span class=\"token hvariable\">s</span></code></pre></div>\n<p>Again <a href=\"https://artyom.me/lens-over-tea-2\">lens over tea</a> explains in detail the motivation behind the above representation.</p>\n<p>In this post I’ll be ..ahem.. focusing on the TypeScript implementation. For a short explanation, observe that the above definition is just a specialization of the other Optic definitions (for example replace <code class=\"language-text\">Getting r</code> with <code class=\"language-text\">Lens</code> and <code class=\"language-text\">Const r</code> with some arbitrary Functor <code class=\"language-text\">f</code> to obtain the Lens definition). We’re specializing the definition to <code class=\"language-text\">Const</code> mainly to avoid updating a read only Optic.</p>\n<p>So we need, somehow, to define the <code class=\"language-text\">Const</code> Functor (and Applicative) as well as <code class=\"language-text\">Getting</code>. And the representation has to be consistent with other Optics for the composition to still work and the compiler to infer the right types.</p>\n<p>In Haskell, <code class=\"language-text\">Const</code> is defined as a compile-time wrapper</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">newtype</span> <span class=\"token constant\">Const</span> <span class=\"token hvariable\">r</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Const</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">getConst</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">r</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In other words, <code class=\"language-text\">Const</code> holds a value of type <code class=\"language-text\">r</code> but from the perspective of the type system it is both an <code class=\"language-text\">r</code> and an <code class=\"language-text\">a</code>. In TypeScript we could achieve a similar thing by using an intersection type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Const<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">R</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, the real value is <code class=\"language-text\">R</code>. <code class=\"language-text\">A</code> is just a <em>phantom type</em>.</p>\n<p>Now for <code class=\"language-text\">Getting</code>, the trick (or the hack) is to give <code class=\"language-text\">Getting</code> a shape similar to other optics, but with additional constraints on the mapped types</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Getting<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> $<span class=\"token keyword\">type</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Getting\"</span><span class=\"token punctuation\">;</span>\n  $applyOptic<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">FA</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Const<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FS</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Const<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">F</span><span class=\"token operator\">:</span> Applictive<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FA</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FS</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    f<span class=\"token operator\">:</span> Fn<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FA</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    s<span class=\"token operator\">:</span> <span class=\"token constant\">S</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">FS</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I beleive the <code class=\"language-text\">... extends Const&lt;R, X&gt;</code> clauses are not effective with TypeScript bivariance on function parameters. But the <code class=\"language-text\">$type?: Getting</code> ensures that we don’t actually set or update Getters (which can be created using the <code class=\"language-text\">to</code> function). This requires of course that we add <code class=\"language-text\">Getting</code> to the type of all other optics which is in fact true (they are all Getters).</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Iso<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> $<span class=\"token keyword\">type</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Getting\"</span> <span class=\"token operator\">&amp;</span> <span class=\"token string\">\"Iso\"</span> <span class=\"token operator\">&amp;</span> <span class=\"token string\">\"Lens\"</span> <span class=\"token operator\">&amp;</span> <span class=\"token string\">\"Traversal\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ... idem for all other optics</span></code></pre></div>\n<p>We need also to add an overload to <code class=\"language-text\">compose</code>, because composing a Getter with another Optic should always result on a Getter. Since <code class=\"language-text\">Getting</code> is now the most basic type (instead of <code class=\"language-text\">Traversal</code>) we need to add the overload at the bottom after all the others</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ... all other overloads</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">compose</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  parent<span class=\"token operator\">:</span> Traversal<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  child<span class=\"token operator\">:</span> Traversal<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Traversal<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">compose</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  parent<span class=\"token operator\">:</span> Getter<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  child<span class=\"token operator\">:</span> Getter<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">X</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Getter<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">X</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>TypeScript compiler will traverse the overloads from the top (most specific optics) to the bottom (most general optics) and will choose the most specific result for our composition.</p>\n<p>For <code class=\"language-text\">Getter</code>s I just moved the <code class=\"language-text\">R</code> type parameter down to the optic function. My assumption is that now <code class=\"language-text\">Getter&lt;S,A&gt;</code> is a <code class=\"language-text\">Getting&lt;R,S,A&gt;</code> for all <code class=\"language-text\">R</code>s (which should be inferred by the compiler from the context)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Getter<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> $<span class=\"token keyword\">type</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Getting\"</span><span class=\"token punctuation\">;</span>\n  $applyOptic<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FA</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Const<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FS</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Const<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token constant\">F</span><span class=\"token operator\">:</span> Functor<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FA</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FS</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    f<span class=\"token operator\">:</span> Fn<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">FA</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    s<span class=\"token operator\">:</span> <span class=\"token constant\">S</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">FS</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">to</code> converts a normal function to a <code class=\"language-text\">Getter</code> (so it can be composed with other optics).</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">to</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>sa<span class=\"token operator\">:</span> Fn<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Getter<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">$applyOptic</span><span class=\"token punctuation\">(</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token function\">sa</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>For now I’m using sort of hack <code class=\"language-text\">as any</code> to typecast the result, but it should be safe (because we know the result of applying <code class=\"language-text\">f</code> is a <code class=\"language-text\">Const&lt;R,A&gt;</code> which could be safely converted to <code class=\"language-text\">Const&lt;R,S&gt;</code> since <code class=\"language-text\">A</code> and <code class=\"language-text\">S</code> are just phantom types).</p>\n<h3>Accessor functions</h3>\n<p>We still need to implement the <code class=\"language-text\">Functor</code> and <code class=\"language-text\">Applicative</code> interfaces for <code class=\"language-text\">Const</code>. But first we need to define the <code class=\"language-text\">Monoid</code> interface (needed by <code class=\"language-text\">Const</code> to be an Applicative)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Monoid<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">empty</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>xs<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The following function implements the Const Functor and Applicative</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">ConstM</span><span class=\"token punctuation\">(</span><span class=\"token constant\">M</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">pure</span><span class=\"token operator\">:</span> _ <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">combine</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> ks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>ks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The definition of <code class=\"language-text\">map</code> is trivial, we’e just forwarding our constant value (the <code class=\"language-text\">R</code> in <code class=\"language-text\">Const&lt;R,A&gt;</code>). For the Applicative definition, we’re relying on a given Monoid <code class=\"language-text\">M</code> to accumulate the <code class=\"language-text\">R</code>s. For example if we consider the <code class=\"language-text\">List</code> Monoid</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> List <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">empty</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>xss<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>xss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then I can create a Const Applicative that accumulates all the values into an array</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> ConstList <span class=\"token operator\">=</span> <span class=\"token function\">Const</span><span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And here is the corresponding accessor function (as always we’re specifying the type parameters at the call site)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">toList</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">:</span> Getting<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">.</span><span class=\"token function\">$applyOptic</span><span class=\"token punctuation\">(</span>\n    ConstList <span class=\"token keyword\">as</span> Applicative<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> Const<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Const<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">>></span><span class=\"token punctuation\">,</span>\n    x <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Const<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    s\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using <code class=\"language-text\">toList</code>, for example, on a Traversal will <code class=\"language-text\">combine</code> all the values inside using the <code class=\"language-text\">ConstList</code> Applicative, which under the hoods uses the <code class=\"language-text\">List</code> Monoid to concatenate the traversed values.</p>\n<p>The other functions <code class=\"language-text\">view</code>, <code class=\"language-text\">preview</code> and <code class=\"language-text\">has</code> all have a similar implementation, we use a special instance of the Monoid to provide a different behavior (cf link below for the full implementation).</p>\n<blockquote>\n<p>One caveat is that <code class=\"language-text\">view</code> doesn’t actually work the same way as in Haskell. Since it can only get one value, if it’s used on a Traversal or Prism it’ll throw an Error (in Haskell the Monoid intance is automatically choosed by the compiler).</p>\n</blockquote>\n<blockquote>\n<p>Another last minute caveat is that optional <code class=\"language-text\">$type</code> in Optic interface doesn’t seem to play nice with <code class=\"language-text\">strictNullChecks</code> enabled. But probably fixable.</p>\n</blockquote>\n<p>Next typings to add</p>\n<ul>\n<li>The Proxy interface</li>\n<li>More awkward multiple composition (composing more than 2 optics)</li>\n</ul>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://www.typescriptlang.org/play/index.html#src=%2F%2F%20convenient%20shortcut%20for%20functions%20taking%201%20param%0D%0Atype%20Fn%3CA%2C%20B%3E%20%3D%20(x%3A%20A)%20%3D%3E%20B%3B%0D%0A%0D%0Atype%20Either%3CA%2C%20B%3E%20%3D%20%7B%20type%3A%20%22Left%22%3B%20value%3A%20A%20%7D%20%7C%20%7B%20type%3A%20%22Right%22%3B%20value%3A%20B%20%7D%3B%0D%0A%0D%0Ainterface%20Monoid%3CA%3E%20%7B%0D%0A%20%20empty%3A%20()%20%3D%3E%20A%3B%0D%0A%20%20concat%3A%20(xs%3A%20A%5B%5D)%20%3D%3E%20A%3B%0D%0A%7D%0D%0A%0D%0Ainterface%20Functor%3CA%2C%20B%2C%20FA%2C%20FB%3E%20%7B%0D%0A%20%20map(f%3A%20Fn%3CA%2C%20B%3E%2C%20x%3A%20FA)%3A%20FB%3B%0D%0A%7D%0D%0A%0D%0Ainterface%20Applicative%3CA%2C%20B%2C%20FA%2C%20FB%3E%20extends%20Functor%3CA%2C%20B%2C%20FA%2C%20FB%3E%20%7B%0D%0A%20%20pure%3A%20Fn%3CB%2C%20FB%3E%3B%0D%0A%20%20combine%3A%20(f%3A%20Fn%3CA%5B%5D%2C%20B%3E%2C%20fas%3A%20FA%5B%5D)%20%3D%3E%20FB%3B%0D%0A%7D%0D%0A%0D%0Ainterface%20Getting%3CR%2C%20S%2C%20A%3E%20%7B%0D%0A%20%20readonly%20%24type%3F%3A%20%22Getting%22%3B%0D%0A%20%20%24applyOptic%3A%20%3CFA%20extends%20Const%3CR%2C%20A%3E%2C%20FS%20extends%20Const%3CR%2C%20S%3E%3E(%0D%0A%20%20%20%20F%3A%20Applicative%3CA%2C%20S%2C%20FA%2C%20FS%3E%2C%0D%0A%20%20%20%20f%3A%20Fn%3CA%2C%20FA%3E%2C%0D%0A%20%20%20%20s%3A%20S%0D%0A%20%20)%20%3D%3E%20FS%3B%0D%0A%7D%0D%0A%0D%0Ainterface%20Getter%3CS%2C%20A%3E%20%7B%0D%0A%20%20readonly%20%24type%3F%3A%20%22Getting%22%3B%0D%0A%20%20%24applyOptic%3A%20%3CR%2C%20FA%20extends%20Const%3CR%2C%20A%3E%2C%20FS%20extends%20Const%3CR%2C%20S%3E%3E(%0D%0A%20%20%20%20F%3A%20Functor%3CA%2C%20S%2C%20FA%2C%20FS%3E%2C%0D%0A%20%20%20%20f%3A%20Fn%3CA%2C%20FA%3E%2C%0D%0A%20%20%20%20s%3A%20S%0D%0A%20%20)%20%3D%3E%20FS%3B%0D%0A%7D%0D%0A%0D%0Ainterface%20Iso%3CS%2C%20T%2C%20A%2C%20B%3E%20%7B%0D%0A%20%20readonly%20%24type%3F%3A%20%22Getting%22%20%26%20%22Iso%22%20%26%20%22Lens%22%20%26%20%22Traversal%22%3B%0D%0A%20%20%24applyOptic%3A%20(%3CFB%2C%20FT%3E(F%3A%20Functor%3CB%2C%20T%2C%20FB%2C%20FT%3E%2C%20f%3A%20Fn%3CA%2C%20FB%3E%2C%20s%3A%20S)%20%3D%3E%20FT)%3B%0D%0A%20%20from%3A%20(s%3A%20S)%20%3D%3E%20A%3B%0D%0A%20%20to%3A%20(b%3A%20B)%20%3D%3E%20T%3B%0D%0A%7D%0D%0A%0D%0Ainterface%20Prism%3CS%2C%20T%2C%20A%2C%20B%3E%20%7B%0D%0A%20%20readonly%20%24type%3F%3A%20%22Getting%22%20%26%20%22Prism%22%20%26%20%22Traversal%22%3B%0D%0A%20%20%24applyOptic%3A%20(%3CFB%2C%20FT%3E(%0D%0A%20%20%20%20F%3A%20Applicative%3CB%2C%20T%2C%20FB%2C%20FT%3E%2C%0D%0A%20%20%20%20f%3A%20Fn%3CA%2C%20FB%3E%2C%0D%0A%20%20%20%20s%3A%20S%0D%0A%20%20)%20%3D%3E%20FT)%3B%0D%0A%20%20match%3A%20(s%3A%20S)%20%3D%3E%20Either%3CT%2C%20A%3E%3B%0D%0A%20%20build%3A%20(b%3A%20B)%20%3D%3E%20T%3B%0D%0A%7D%0D%0A%0D%0Ainterface%20Lens%3CS%2C%20T%2C%20A%2C%20B%3E%20%7B%0D%0A%20%20readonly%20%24type%3F%3A%20%22Getting%22%20%26%20%22Lens%22%20%26%20%22Traversal%22%3B%0D%0A%20%20%24applyOptic%3A%20(%3CFB%2C%20FT%3E(F%3A%20Functor%3CB%2C%20T%2C%20FB%2C%20FT%3E%2C%20f%3A%20Fn%3CA%2C%20FB%3E%2C%20s%3A%20S)%20%3D%3E%20FT)%3B%0D%0A%7D%0D%0A%0D%0Ainterface%20Traversal%3CS%2C%20T%2C%20A%2C%20B%3E%20%7B%0D%0A%20%20readonly%20%24type%3F%3A%20%22Getting%22%20%26%20%22Traversal%22%3B%0D%0A%20%20%24applyOptic%3A%20(%3CFB%2C%20FT%3E(%0D%0A%20%20%20%20F%3A%20Applicative%3CB%2C%20T%2C%20FB%2C%20FT%3E%2C%0D%0A%20%20%20%20f%3A%20Fn%3CA%2C%20FB%3E%2C%0D%0A%20%20%20%20s%3A%20S%0D%0A%20%20)%20%3D%3E%20FT)%3B%0D%0A%7D%0D%0A%0D%0A%2F%2F%20Monomorphic%20version%0D%0Atype%20SimpleIso%3CS%2C%20A%3E%20%3D%20Iso%3CS%2C%20S%2C%20A%2C%20A%3E%3B%0D%0Atype%20SimplePrism%3CS%2C%20A%3E%20%3D%20Prism%3CS%2C%20S%2C%20A%2C%20A%3E%3B%0D%0Atype%20SimpleLens%3CS%2C%20A%3E%20%3D%20Lens%3CS%2C%20S%2C%20A%2C%20A%3E%3B%0D%0Atype%20SimpleTraversal%3CS%2C%20A%3E%20%3D%20Traversal%3CS%2C%20S%2C%20A%2C%20A%3E%3B%0D%0A%0D%0Atype%20Const%3CR%2C%20A%3E%20%3D%20R%20%26%20A%3B%0D%0A%0D%0Afunction%20ConstM(M)%20%7B%0D%0A%20%20return%20%7B%0D%0A%20%20%20%20map(f%2C%20k)%20%7B%0D%0A%20%20%20%20%20%20return%20k%3B%0D%0A%20%20%20%20%7D%2C%0D%0A%20%20%20%20pure%3A%20_%20%3D%3E%20M.empty()%2C%0D%0A%20%20%20%20combine(_%2C%20ks)%20%7B%0D%0A%20%20%20%20%20%20return%20M.concat(ks)%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%7D%3B%0D%0A%7D%0D%0A%0D%0Aconst%20Void%3A%20Monoid%3Cnever%3E%20%3D%20%7B%0D%0A%20%20empty()%20%7B%0D%0A%20%20%20%20throw%20new%20Error(%22Void.concat!%22)%3B%0D%0A%20%20%7D%2C%0D%0A%20%20concat(xs)%20%7B%0D%0A%20%20%20%20throw%20new%20Error(%22Void.concat!%22)%3B%0D%0A%20%20%7D%0D%0A%7D%3B%0D%0A%0D%0Aexport%20const%20First%20%3D%20%7B%0D%0A%20%20empty%3A%20()%20%3D%3E%20null%2C%0D%0A%20%20concat2%3A%20(x1%2C%20x2)%20%3D%3E%20(x1%20!%3D%3D%20null%20%3F%20x1%20%3A%20x2)%2C%0D%0A%20%20concat%3A%20xs%20%3D%3E%20xs.reduce(First.concat2%2C%20null)%0D%0A%7D%3B%0D%0A%0D%0Aexport%20const%20Any%20%3D%20%7B%0D%0A%20%20empty%3A%20()%20%3D%3E%20false%2C%0D%0A%20%20concat2%3A%20(x1%2C%20x2)%20%3D%3E%20x1%20%7C%7C%20x2%2C%0D%0A%20%20concat%3A%20xs%20%3D%3E%20xs.reduce(Any.concat2%2C%20false)%0D%0A%7D%3B%0D%0A%0D%0Aconst%20List%20%3D%20%7B%0D%0A%20%20empty%3A%20()%20%3D%3E%20%5B%5D%2C%0D%0A%20%20concat(xss)%20%7B%0D%0A%20%20%20%20return%20%5B%5D.concat(...xss)%3B%0D%0A%20%20%7D%0D%0A%7D%3B%0D%0A%0D%0Aconst%20ConstVoid%20%3D%20ConstM(Void)%3B%0D%0Aconst%20ConstList%20%3D%20ConstM(List)%3B%0D%0Aconst%20ConstFirst%20%3D%20ConstM(First)%3B%0D%0Aconst%20ConstAny%20%3D%20ConstM(Any)%3B%0D%0A%0D%0A%2F%2F%20This%20should%20work%20polymorhically%20for%20any%20Functor%0D%0Aconst%20Identity%20%3D%20%7B%0D%0A%20%20map(f%2C%20x)%20%7B%0D%0A%20%20%20%20return%20f(x)%3B%0D%0A%20%20%7D%2C%0D%0A%20%20pure%3A%20x%20%3D%3E%20x%2C%0D%0A%20%20combine(f%2C%20xs)%20%7B%0D%0A%20%20%20%20return%20f(xs)%3B%0D%0A%20%20%7D%0D%0A%7D%3B%0D%0A%0D%0Afunction%20compose%3CS%2C%20T%2C%20A%2C%20B%2C%20X%2C%20Y%3E(%0D%0A%20%20parent%3A%20Iso%3CS%2C%20T%2C%20A%2C%20B%3E%2C%0D%0A%20%20child%3A%20Iso%3CA%2C%20B%2C%20X%2C%20Y%3E%0D%0A)%3A%20Iso%3CS%2C%20T%2C%20X%2C%20Y%3E%3B%0D%0Afunction%20compose%3CS%2C%20T%2C%20A%2C%20B%2C%20X%2C%20Y%3E(%0D%0A%20%20parent%3A%20Prism%3CS%2C%20T%2C%20A%2C%20B%3E%2C%0D%0A%20%20child%3A%20Prism%3CA%2C%20B%2C%20X%2C%20Y%3E%0D%0A)%3A%20Prism%3CS%2C%20T%2C%20X%2C%20Y%3E%3B%0D%0A%0D%0Afunction%20compose%3CS%2C%20T%2C%20A%2C%20B%2C%20X%2C%20Y%3E(%0D%0A%20%20parent%3A%20Lens%3CS%2C%20T%2C%20A%2C%20B%3E%2C%0D%0A%20%20child%3A%20Lens%3CA%2C%20B%2C%20X%2C%20Y%3E%0D%0A)%3A%20Lens%3CS%2C%20T%2C%20X%2C%20Y%3E%3B%0D%0Afunction%20compose%3CS%2C%20T%2C%20A%2C%20B%2C%20X%2C%20Y%3E(%0D%0A%20%20parent%3A%20Traversal%3CS%2C%20T%2C%20A%2C%20B%3E%2C%0D%0A%20%20child%3A%20Traversal%3CA%2C%20B%2C%20X%2C%20Y%3E%0D%0A)%3A%20Traversal%3CS%2C%20T%2C%20X%2C%20Y%3E%3B%0D%0Afunction%20compose%3CS%2C%20T%2C%20A%2C%20B%2C%20X%2C%20Y%3E(%0D%0A%20%20parent%3A%20Getter%3CS%2C%20A%3E%2C%0D%0A%20%20child%3A%20Getter%3CA%2C%20X%3E%0D%0A)%3A%20Getter%3CS%2C%20X%3E%3B%0D%0Afunction%20compose(parent%2C%20child)%20%7B%0D%0A%20%20return%20%7B%0D%0A%20%20%20%20%24applyOptic(F%2C%20f%2C%20s)%20%7B%0D%0A%20%20%20%20%20%20return%20parent.%24applyOptic(F%2C%20a%20%3D%3E%20child.%24applyOptic(F%2C%20f%2C%20a)%2C%20s)%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%7D%20as%20any%3B%0D%0A%7D%0D%0A%0D%0Afunction%20lens%3CS%2C%20T%2C%20A%2C%20B%3E(%0D%0A%20%20getter%3A%20Fn%3CS%2C%20A%3E%2C%0D%0A%20%20setter%3A%20(b%3A%20B%2C%20s%3A%20S)%20%3D%3E%20T%0D%0A)%3A%20Lens%3CS%2C%20T%2C%20A%2C%20B%3E%20%7B%0D%0A%20%20return%20%7B%0D%0A%20%20%20%20%24applyOptic%3CFB%2C%20FT%3E(F%3A%20Functor%3CB%2C%20T%2C%20FB%2C%20FT%3E%2C%20f%3A%20Fn%3CA%2C%20FB%3E%2C%20s%3A%20S)%3A%20FT%20%7B%0D%0A%20%20%20%20%20%20const%20a%20%3D%20getter(s)%3B%0D%0A%20%20%20%20%20%20const%20fb%20%3D%20f(a)%3B%0D%0A%20%20%20%20%20%20return%20F.map(b%20%3D%3E%20%7B%0D%0A%20%20%20%20%20%20%20%20return%20setter(b%2C%20s)%3B%0D%0A%20%20%20%20%20%20%7D%2C%20fb)%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%7D%3B%0D%0A%7D%0D%0A%0D%0Afunction%20over%3CS%2C%20T%2C%20A%2C%20B%3E(l%3A%20Traversal%3CS%2C%20T%2C%20A%2C%20B%3E%2C%20f%3A%20Fn%3CA%2C%20B%3E%2C%20s%3A%20S)%3A%20T%20%7B%0D%0A%20%20return%20l.%24applyOptic%3CB%2C%20T%3E(Identity%2C%20f%2C%20s)%3B%0D%0A%7D%0D%0A%0D%0Afunction%20view%3CS%2C%20A%3E(l%3A%20Getting%3CA%2C%20S%2C%20A%3E%2C%20s%3A%20S)%3A%20A%20%7B%0D%0A%20%20return%20l.%24applyOptic(%0D%0A%20%20%20%20ConstVoid%20as%20Applicative%3CA%2C%20S%2C%20Const%3CA%2C%20A%3E%2C%20Const%3CA%2C%20S%3E%3E%2C%0D%0A%20%20%20%20x%20%3D%3E%20x%2C%0D%0A%20%20%20%20s%0D%0A%20%20)%3B%0D%0A%7D%0D%0A%0D%0Afunction%20preview%3CS%2C%20A%3E(l%3A%20Getting%3CA%20%7C%20null%2C%20S%2C%20A%3E%2C%20s%3A%20S)%3A%20A%20%7C%20null%20%7B%0D%0A%20%20return%20l.%24applyOptic(%0D%0A%20%20%20%20ConstFirst%20as%20Applicative%3CA%2C%20S%2C%20Const%3CA%20%7C%20null%2C%20A%3E%2C%20Const%3CA%20%7C%20null%2C%20S%3E%3E%2C%0D%0A%20%20%20%20x%20%3D%3E%20x%20as%20Const%3CA%20%7C%20null%2C%20A%3E%2C%0D%0A%20%20%20%20s%0D%0A%20%20)%3B%0D%0A%7D%0D%0A%0D%0Afunction%20has%3CS%2C%20A%3E(l%3A%20Getting%3Cboolean%2C%20S%2C%20A%3E%2C%20s%3A%20S)%3A%20boolean%20%7B%0D%0A%20%20return%20l.%24applyOptic(%0D%0A%20%20%20%20ConstAny%20as%20Applicative%3CA%2C%20S%2C%20Const%3Cboolean%2C%20A%3E%2C%20Const%3Cboolean%2C%20S%3E%3E%2C%0D%0A%20%20%20%20x%20%3D%3E%20x%20as%20Const%3Cboolean%2C%20A%3E%2C%0D%0A%20%20%20%20s%0D%0A%20%20)%3B%0D%0A%7D%0D%0A%0D%0Afunction%20toList%3CS%2C%20A%3E(l%3A%20Getting%3CA%5B%5D%2C%20S%2C%20A%3E%2C%20s%3A%20S)%3A%20A%5B%5D%20%7B%0D%0A%20%20return%20l.%24applyOptic(%0D%0A%20%20%20%20ConstVoid%20as%20Applicative%3CA%2C%20S%2C%20Const%3CA%5B%5D%2C%20A%3E%2C%20Const%3CA%5B%5D%2C%20S%3E%3E%2C%0D%0A%20%20%20%20x%20%3D%3E%20%5Bx%5D%20as%20Const%3CA%5B%5D%2C%20A%3E%2C%0D%0A%20%20%20%20s%0D%0A%20%20)%3B%0D%0A%7D%0D%0A%0D%0Afunction%20to%3CS%2C%20A%3E(sa%3A%20Fn%3CS%2C%20A%3E)%3A%20Getter%3CS%2C%20A%3E%20%7B%0D%0A%20%20return%20%7B%0D%0A%20%20%20%20%24applyOptic(F%2C%20f%2C%20s)%20%7B%0D%0A%20%20%20%20%20%20return%20f(sa(s))%20as%20any%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%7D%3B%0D%0A%7D%0D%0A%0D%0Afunction%20iso%3CS%2C%20T%2C%20A%2C%20B%3E(from%3A%20(s%3A%20S)%20%3D%3E%20A%2C%20to%3A%20(b%3A%20B)%20%3D%3E%20T)%3A%20Iso%3CS%2C%20T%2C%20A%2C%20B%3E%20%7B%0D%0A%20%20return%20%7B%0D%0A%20%20%20%20%24applyOptic(F%2C%20f%2C%20s)%20%7B%0D%0A%20%20%20%20%20%20return%20F.map(to%2C%20f(from(s)))%3B%0D%0A%20%20%20%20%7D%2C%0D%0A%20%20%20%20from%2C%0D%0A%20%20%20%20to%0D%0A%20%20%7D%3B%0D%0A%7D%0D%0A%0D%0Afunction%20prism%3CS%2C%20T%2C%20A%2C%20B%3E(%0D%0A%20%20match%3A%20(s%3A%20S)%20%3D%3E%20Either%3CT%2C%20A%3E%2C%0D%0A%20%20build%3A%20(b%3A%20B)%20%3D%3E%20T%0D%0A)%3A%20Prism%3CS%2C%20T%2C%20A%2C%20B%3E%20%7B%0D%0A%20%20return%20%7B%0D%0A%20%20%20%20%24applyOptic(F%2C%20f%2C%20s)%20%7B%0D%0A%20%20%20%20%20%20const%20eta%20%3D%20match(s)%3B%0D%0A%20%20%20%20%20%20if%20(eta.type%20%3D%3D%3D%20%22Left%22)%20%7B%0D%0A%20%20%20%20%20%20%20%20return%20F.pure(eta.value)%3B%0D%0A%20%20%20%20%20%20%7D%20else%20%7B%0D%0A%20%20%20%20%20%20%20%20return%20F.map(build%2C%20f(eta.value))%3B%0D%0A%20%20%20%20%20%20%7D%0D%0A%20%20%20%20%7D%2C%0D%0A%20%20%20%20match%2C%0D%0A%20%20%20%20build%0D%0A%20%20%7D%3B%0D%0A%7D%0D%0A%0D%0Afunction%20from%3CS%2C%20T%2C%20A%2C%20B%3E(anIso%3A%20Iso%3CS%2C%20T%2C%20A%2C%20B%3E)%3A%20Iso%3CB%2C%20A%2C%20T%2C%20S%3E%20%7B%0D%0A%20%20return%20iso(anIso.to%2C%20anIso.from)%3B%0D%0A%7D%0D%0A%0D%0Afunction%20prop%3CS%3E()%20%7B%0D%0A%20%20return%20%3CK%20extends%20keyof%20S%3E(k%3A%20K)%3A%20SimpleLens%3CS%2C%20S%5BK%5D%3E%20%3D%3E%20%7B%0D%0A%20%20%20%20return%20lens(s%20%3D%3E%20s%5Bk%5D%2C%20(a%2C%20s)%20%3D%3E%20Object.assign(%7B%7D%2C%20s%2C%20%7B%20%5Bk%5D%3A%20a%20%7D))%3B%0D%0A%20%20%7D%3B%0D%0A%7D%0D%0A%0D%0Afunction%20each%3CS%3E()%3A%20Traversal%3CS%5B%5D%2C%20S%5B%5D%2C%20S%2C%20S%3E%20%7B%0D%0A%20%20return%20%7B%0D%0A%20%20%20%20%24applyOptic(F%2C%20f%2C%20xs)%20%7B%0D%0A%20%20%20%20%20%20return%20F.combine(ys%20%3D%3E%20ys%2C%20xs.map(f))%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%7D%3B%0D%0A%7D%0D%0A%0D%0Aconst%20maybNum%3A%20SimplePrism%3Cstring%2C%20number%3E%20%3D%20prism(%0D%0A%20%20function%20match(s%3A%20string)%3A%20Either%3Cstring%2C%20number%3E%20%7B%0D%0A%20%20%20%20if%20(isNaN(%2Bs))%20%7B%0D%0A%20%20%20%20%20%20return%20%7B%20type%3A%20%22Left%22%2C%20value%3A%20s%20%7D%3B%0D%0A%20%20%20%20%7D%20else%20%7B%0D%0A%20%20%20%20%20%20return%20%7B%20type%3A%20%22Right%22%2C%20value%3A%20%2Bs%20%7D%3B%0D%0A%20%20%20%20%7D%0D%0A%20%20%7D%2C%0D%0A%20%20n%20%3D%3E%20String(n)%0D%0A)%3B%0D%0A%0D%0Aconst%20str%3A%20SimpleIso%3Cnumber%2C%20number%3E%20%3D%20iso(s%20%3D%3E%20s%2C%20s%20%3D%3E%20s)%3B%0D%0A%0D%0Atype%20Address%20%3D%20%7B%0D%0A%20%20street%3A%20string%3B%0D%0A%20%20num%3A%20number%3B%0D%0A%7D%3B%0D%0A%0D%0Atype%20Person%20%3D%20%7B%0D%0A%20%20name%3A%20string%3B%0D%0A%20%20address%3A%20Address%3B%0D%0A%7D%3B%0D%0A%0D%0Aconst%20address%20%3D%20prop%3CPerson%3E()(%22address%22)%3B%0D%0Aconst%20num%20%3D%20prop%3CAddress%3E()(%22num%22)%3B%0D%0A%0D%0A%2F%2F%20Prism%20%2B%20Iso%20%3D%20Traversal%0D%0Aconst%20strnum%20%3D%20compose(%0D%0A%20%20maybNum%2C%0D%0A%20%20str%0D%0A)%3B%0D%0A%0D%0A%2F%2F%20Lens%20%2B%20Lens%20%3D%20Lens%0D%0Aconst%20addressNum%20%3D%20compose(%0D%0A%20%20address%2C%0D%0A%20%20num%0D%0A)%3B%0D%0A%0D%0Aconst%20toStr%20%3D%20to((n%3A%20number)%20%3D%3E%20String(n))%3B%0D%0A%0D%0A%2F%2F%20Lens%20%2B%20Getter%20%3D%20Getter%0D%0Aconst%20l%20%3D%20compose(%0D%0A%20%20addressNum%2C%0D%0A%20%20toStr%0D%0A)%3B%0D%0A%0D%0Aconst%20v1%20%3D%20toList(addressNum%2C%20%7B%7D%20as%20Person)%3B%0D%0A\">TypeScript playground</a></li>\n</ul>","frontmatter":{"title":"Typing Optics (4): Getters and Const","date":"November 29, 2018","description":null}},"previous":{"fields":{"slug":"/2018-11-27-typing-optics-3/"},"frontmatter":{"title":"Typing Optics (3): Isomorphisms and Prisms"}},"next":{"fields":{"slug":"/2018-12-02-typing-optics-5/"},"frontmatter":{"title":"Typing Optics (5): Lens Proxies"}}},"pageContext":{"id":"504c34f5-67a2-5191-822d-ff90d35e8a84","previousPostId":"87f5f226-da9c-52ca-94f5-fc3b8f552f82","nextPostId":"6672d802-742c-5a3b-852a-c6df5b3eb597"}},"staticQueryHashes":["2841359383","3257411868"]}