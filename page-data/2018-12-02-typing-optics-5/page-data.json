{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018-12-02-typing-optics-5/","result":{"data":{"site":{"siteMetadata":{"title":"Abstract fun"}},"markdownRemark":{"id":"1b458580-823d-5781-94a3-47f3a6b68e56","excerpt":"OK, continuing my hack to make my focused lens library definetely typed. So far, I have type definitions for base typeclasses/interfaces (Monoids, Functor and…","html":"<p>OK, continuing my hack to make my <a href=\"https://github.com/yelouafi/focused\">focused lens library</a> definetely typed.</p>\n<p>So far, I have type definitions for</p>\n<ul>\n<li>base typeclasses/interfaces (Monoids, Functor and Applicative)</li>\n<li>Gettings and Getters</li>\n<li>Isos</li>\n<li>Lenses</li>\n<li>Prisms</li>\n<li>Traversals</li>\n<li>Lens &#x26; Traversal Composition</li>\n<li>optic operations (<code class=\"language-text\">over</code>, <code class=\"language-text\">view</code>, <code class=\"language-text\">preview</code>)</li>\n</ul>\n<p>In this post I’ll be adding typings for the Proxy interface.</p>\n<h3>Typing Proxy interface</h3>\n<p><code class=\"language-text\">lensProxy</code> is they key interface to create Optics in <code class=\"language-text\">focused</code>. The function provides a familiar dot-style to create and compose optics.</p>\n<p>For example, say we have the following object shapes</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">{</span>\n  street<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  addresses<span class=\"token operator\">:</span> Address<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we can use <code class=\"language-text\">lensProxy</code> (perhaps I should peek a better name)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> _ <span class=\"token operator\">=</span> <span class=\"token function\">lensProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Lname <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// like prop(\"name\")</span>\n<span class=\"token comment\">// type = SimpleLens&lt;Person, string></span>\n\n<span class=\"token keyword\">const</span> LmainStreet <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span>addresses<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// like compose(prop(\"addresses\"), index(0), prop(\"street\"))</span>\n<span class=\"token comment\">// type = SimpleLens&lt;Person, number></span>\n\nlAllStreets <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span>addresses<span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// like compose(prop(\"addresses\"), each, prop(\"street\"))</span>\n<span class=\"token comment\">// type = SimpleTraversal&lt;Person, number></span></code></pre></div>\n<p>So a Lens Proxy (or a TraversalProxy, IsoProxy…) is</p>\n<ol>\n<li>A Lens itself</li>\n<li>But also an object of the shame shape of the focused type …</li>\n<li>where each property value is replaced with a Lens focusing at that value</li>\n<li>repeat the above process recursively for each child object property</li>\n</ol>\n<p>For example, a Lens Proxy for <code class=\"language-text\">Person</code> is of the shape</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> Lens<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n  addresses<span class=\"token operator\">:</span> LensProxy<span class=\"token operator\">&lt;</span>Person<span class=\"token punctuation\">,</span> Address<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We need to construct those proxy shapes dynamically from the provided Object type. In Haskell the lens library uses something called Template Haskell (kind of type safe macros). We don’t have such thing in TypeScript but fortunately we can use a useful feature called <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html\">Mapped Types</a>(look for the section of the same name). It lets you <em>map</em> the properties of an object type to another type which is exactly what we need.</p>\n<p>For example, here is a possible definition for <code class=\"language-text\">LensProxy</code></p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> SimpleLens<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For each property type in the target object we recursively generate a LensProxy for that type.</p>\n<p>We need also to put a term to our recursion, we can use TypeScript conditional types to stop recusing on non-object types</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> SimpleLens<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But that’s only half the solution, we still have 2 issues to overcome</p>\n<ol>\n<li>We need to define composition properly (the resulting Optic from <code class=\"language-text\">.</code> )</li>\n<li>lensProxy also offers a <code class=\"language-text\">$</code> method where you can plug an arbitrary optic. It composes the given Optic with the current Proxy so we should also type the result properly</li>\n</ol>\n<p>A possible solution for (1) is to define a Proxy type for each Optic type. So we’ll have an <code class=\"language-text\">IsoProxy</code> for <code class=\"language-text\">Iso</code>, a <code class=\"language-text\">TraversalProxy</code> for <code class=\"language-text\">Traversal</code> and so on.</p>\n<p>We know that the <code class=\"language-text\">.</code> creates an Optic using either <code class=\"language-text\">prop</code> or <code class=\"language-text\">index</code> so the second component of composition is always a Lens. It means the result depends only on the parent Proxy.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">IsoProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> SimpleIso<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Iso + Lens = Lens</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> SimpleLens<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Lens + Lens = Lens</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TraversalProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> SimpleTraversal<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Traversal + Lens = Traversal</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> TraversalProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PrismProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> SimplePrism<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Prism + Lens = Traversal</span>\n    <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> TraversalProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In fact, I think we can only keep the <code class=\"language-text\">Lens</code> and <code class=\"language-text\">Traversal</code> variants. First there is no way to create a <code class=\"language-text\">PrismProxy</code> as a root or child Proxy. For <code class=\"language-text\">Iso</code> we can only create a root <code class=\"language-text\">IsoProxy</code> using the trivial Identity Optic, and I don’t see how that could be useful to someone.</p>\n<p>For (2) we’ll add a method <code class=\"language-text\">$</code> to the definition and use overloads to return the right type of the composition</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> SimpleLens<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token generic-function\"><span class=\"token function\">$</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">:</span> SimpleLens<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> LensProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token generic-function\"><span class=\"token function\">$</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">:</span> SimpleTraversal<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TraversalProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">TraversalProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> SimpleTraversal<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> TraversalProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token generic-function\"><span class=\"token function\">$</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>child<span class=\"token operator\">:</span> SimpleTraversal<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TraversalProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To be honest, I’ve still some doubts about the recursive code. There are also some (minor) caveats like when we try to compose a LensProxy with plain Lens for example (compiler unable to infer the right types). But for now, the above solution seems to work for most of the common cases.</p>\n<p>I think this will be the last post on those series. There are still things left like composing more than 2 optics but this should be just a matter of adding more overloads to <code class=\"language-text\">compose</code>.</p>\n<h3>Conclusion</h3>\n<p>Initially, I thought it was impossible to type the library because Haskell lenses use some advanced features of the Haskell GHC compiler. I thought TypeScript couldn’t handle that not because it was an inferior type system, but because of the trade-offs and paradigms are hugely different.</p>\n<p>It turns out you can do many things in TypeScript, mainly because the type system is ‘flexible’ (indexed, mapped &#x26; conditional types). It can also get out of the way when you want to (which may also be dangerous if used without extreme care). It makes the system unsound but practical for typing highly dynamic JavaScript libraries (I didn’t check Flow but I think the same arguments apply).</p>\n<p>For the publishing, I was thinking initially of full rewrite from JS to TS, but I think I’ll just add the declaration file for the moment (In fact it’s already published in the latest 0.7.0 release).</p>","frontmatter":{"title":"Typing Optics (5): Lens Proxies","date":"December 02, 2018","description":null}},"previous":{"fields":{"slug":"/2018-11-29-typing-optics-4/"},"frontmatter":{"title":"Typing Optics (4): Getters and Const"}},"next":{"fields":{"slug":"/2018-12-15-csv-parser/"},"frontmatter":{"title":"Write a CSV Parser"}}},"pageContext":{"id":"1b458580-823d-5781-94a3-47f3a6b68e56","previousPostId":"7d19e475-878f-5120-b17a-118c786c1284","nextPostId":"50fd4a75-0b5d-5926-bb7a-5cc85acb8715"}},"staticQueryHashes":["2841359383","3257411868"]}